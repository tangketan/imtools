function drawAllTables()
{
    var tables = document.getElementsByClassName("TableComp");
    for (let index = 0; index < tables.length; index++) {
        const table = tables[index];
        drawTable(table);
    }
}


function drawTable(tableID){
    var table=tableID;
    if(typeof tableID=="string"){
        table = document.getElementById(tableID)
    }
    var canvases=table.getElementsByTagName("canvas");
    var imgs = new Array(canvases.length);
    var captions = table.getElementsByClassName("caption");
    var posInfo = table.getElementsByClassName("PoseInfo")[0];
    var numCols = table.rows[0].cells.length; // 获取表格列数
    var imgX=0, imgY=0, imgScale=1;
    for(var i=0; i< canvases.length; i++)
    {
        canvas = canvases[i];
        canvas.width = document.body.clientWidth/numCols-50;
        canvas.tabIndex = i;
        canvas.canvases = canvases;  // add extra attributes to access all canvases
        captions[i].setAttribute("style", "width:"+canvas.width+"px");
        canvas.caption = captions[i];
        var pos = canvas.dataset.pos;
        // load pos if data-pos is set in html; otherwise copy the 1st canvas's pos or use default one
        if(pos){
            pos = pos.split(',');
            canvas.imgX = parseFloat(pos[0]); //(canvas.dataset.imgx); // note here imgx must be all lower case even if you set data-imgX in html
            canvas.imgY = parseFloat(pos[1]);//(canvas.dataset.imgy);
            canvas.imgScale = parseFloat(pos[2]);//(canvas.dataset.imgscale);
        }else if(i==0){
            canvas.imgX = imgX;
            canvas.imgY = imgY;
            canvas.imgScale = imgScale;
        }else{
            canvas.imgX = canvases[0].imgX;
            canvas.imgY = canvases[0].imgY;
            canvas.imgScale = canvases[0].imgScale;
        }
        canvas.addEventListener("mousedown", mouse_down, false);
    }
    canvas=canvases[0];
    canvas.posInfo = posInfo;
    loadImg(canvases);


    // canvas.onmousewheel=canvas.οnwheel=mouse_wheel; // both methods work
    canvas.addEventListener("wheel", mouse_wheel, false)
    canvas.onmouseleave=function(){
        document.documentElement.style.overflow='auto'; // restore page scroll behavior
    }

}

function loadImg(canvases){
    for(i=0; i< canvases.length; i++)
    {
        var img=new Image();
        if(i==canvases.length-1){
            // img.onload doesn't work
            img.addEventListener('load',function(){drawImage(canvases);} );
        }
        img.src=canvases[i].title; //图像地址由html传入
        canvases[i].img = img;
    }
}

function drawImage(canvases, index){
    index = index || canvases.length;
    var imgX, imgY, imgScale;
    for(i=0; i< index; i++)
    {
        let canvas = canvases[i];
        imgX = canvas.imgX;
        imgY = canvas.imgY;
        imgScale = canvas.imgScale;
        var img = canvas.img;
        canvas.getContext('2d').clearRect(0,0,canvas.width,canvas.height);
        canvas.getContext('2d').drawImage(img,0,0,img.width,img.height,
            imgX,imgY,img.width*imgScale,img.height*imgScale);
        canvas.caption.value = img.src;
    }
    canvases[0].posInfo.innerHTML = "<b>image pos and scale:</b> " + imgX.toFixed(0)+","+imgY.toFixed(0)+","+imgScale.toFixed(3);
}

function mouse_down(event){
    var canvas = event.target || event.srcElement;
    var canvases = canvas.canvases;
    if(event.shiftKey==0){
        // 不按shift键时，左键或右键按下拖动
        var pos=windowToCanvas(canvas,event.clientX,event.clientY);
        let mouse_is_left = event.button==0;
        canvas.onmousemove=function(event){
            canvas.style.cursor="move";
            var pos1=windowToCanvas(canvas,event.clientX,event.clientY);
            var x=pos1.x-pos.x;
            var y=pos1.y-pos.y;
            pos=pos1;
            if(mouse_is_left){
                // 左键按下拖动所有图
                for (let index = 0; index < canvases.length; index++) {
                    const element = canvases[index];
                    canvases[index].imgX+=x;
                    canvases[index].imgY+=y;
                }
                drawImage(canvases);
            }
            else{  // 右键按下只拖动当前图
                canvas.imgX+=x;
                canvas.imgY+=y;
                drawImage(canvases, canvas.tabIndex+1);
            }
        };
        canvas.onmouseup=function(){
            canvas.onmousemove=null;
            canvas.onmouseup=null;
            canvas.style.cursor="default";
        };
    }
    else{
        // shift+左键点击切换当前图与下一张图
        var canvas_index = canvas.tabIndex;
        switchImage(canvases, canvas_index, canvas_index+1);
        // 松开左键时恢复原先的布局
        canvas.onmouseup=function(){drawImage(canvases);};
    }
   
}


function mouse_wheel(event)
{
    document.documentElement.style.overflow='hidden'; // stop page to scroll
    let canvas = event.target || event.srcElement;
    var canvases = canvas.canvases;
    var pos=windowToCanvas(canvas,event.clientX,event.clientY);
    event.wheelDelta=event.wheelDelta?event.wheelDelta:(event.deltaY*(-40));
    let scaleStep=1.2;
    for (let index = 0; index < canvases.length; index++) {
        canvas = canvases[index];
        if(event.wheelDelta>0){
            canvas.imgScale*=scaleStep;
            canvas.imgX=(canvas.imgX-pos.x)*scaleStep+pos.x;
            canvas.imgY=(canvas.imgY-pos.y)*scaleStep+pos.y;
        }else{
            canvas.imgScale/=scaleStep;
            canvas.imgX=(canvas.imgX-pos.x)/scaleStep+pos.x;
            canvas.imgY=(canvas.imgY-pos.y)/scaleStep+pos.y;
        }
    }
    drawImage(canvases);
}

function windowToCanvas(canvas,x,y){
    var bbox = canvas.getBoundingClientRect();
    return {
        x:x - bbox.left - (bbox.width - canvas.width) / 2,
        y:y - bbox.top - (bbox.height - canvas.height) / 2
    };
}

function switchImage(canvases, ind0_, ind1_)
{
    ind0 = ind0_ || 0;
    ind1 = ind1_ || 1;
    ind0 = ind0 % canvases.length;
    ind1 = ind1 % canvases.length;
    // show img2 on canvas and img on canvas2
    canvases[ind0].getContext('2d').clearRect(0,0,canvases[ind0].width,canvases[ind0].height);
    canvases[ind0].getContext('2d').drawImage(canvases[ind1].img,0,0,canvases[ind1].img.width,canvases[ind1].img.height,
        canvases[ind1].imgX,canvases[ind1].imgY,canvases[ind1].img.width*canvases[ind1].imgScale,canvases[ind1].img.height*canvases[ind1].imgScale);    
    canvases[ind0].caption.value = canvases[ind1].img.src;
    canvases[ind1].getContext('2d').clearRect(0,0,canvases[ind1].width,canvases[ind1].height);
    canvases[ind1].getContext('2d').drawImage(canvases[ind0].img,0,0,canvases[ind0].img.width,canvases[ind0].img.height,
        canvases[ind0].imgX,canvases[ind0].imgY,canvases[ind0].img.width*canvases[ind0].imgScale,canvases[ind0].img.height*canvases[ind0].imgScale);    
    canvases[ind1].caption.value = canvases[ind0].img.src;
}

function fitImage(event)
{
    // both methods work
//     var canvases= $(event.target).closest("table").get(0).getElementsByTagName("canvas");
    var canvases= event.target.closest("table").getElementsByTagName("canvas");
    canvases[0].imgX=0;
    canvases[0].imgY=0;
    canvases[0].imgScale = canvases[0].width/canvases[0].img.width;
    drawImage(canvases);
}

function loadImage(event)
{
//     var canvases= $(event.target).closest("table").get(0).getElementsByTagName("canvas");
    var canvases= event.target.closest("table").getElementsByTagName("canvas");
    for(i=0;i<canvases.length;i++){
        canvases[i].img.src = canvases[i].caption.value;
    }
    drawImage();
}

function randomString(len) {
　　len = len || 32;
　　var $chars = 'ABCDEFGHJKMNPQRSTWXYZabcdefhijkmnprstwxyz2345678';    /****默认去掉了容易混淆的字符oOLl,9gq,Vv,Uu,I1****/
　　var maxPos = $chars.length;
　　var pwd = '';
　　for (i = 0; i < len; i++) {
　　　　pwd += $chars.charAt(Math.floor(Math.random() * maxPos));
　　}
　　return pwd;
}